package:
  name: spilo-17
  version: "4.0"
  epoch: 0
  description: "Spilo - a PostgreSQL container image with streaming replication and failover"
  copyright:
    - license: "Apache-2.0"
  options:
    no-depends: true
  dependencies:
    runtime:
      - cronie
      - curl
      - dumb-init
      - etcd
      - glibc
      - openssl
      - patroni
      - pgbouncer
      - postgresql
      - py3-psutil
      - py3-pyyaml
      - py3-requests
      - py3-six
      - py3.13-pystache
      - python-3.13
      - runit
      - util-linux

environment:
  contents:
    packages:
      - brotli-dev
      - build-base
      - busybox
      - c-ares-dev
      - ca-certificates-bundle
      - curl
      - etcd
      - libarchive-tools
      - libcap-dev
      - libcap-utils
      - lzo-dev
      - openssl-dev
      - patroni
      - perl
      - postgis-17
      - py3.11-pystache
      - util-linux-dev
      - wal-g-pg
  environment:
    RW_DIR: /run

vars:
  python-version: "3.11"

pipeline:
  - uses: git-checkout
    with:
      repository: "https://github.com/zalando/spilo.git"
      expected-commit: "4b3d1c6fc66170d8d6cf6a21218146e74ae014d0"
      tag: "${{package.version}}-p2"

  - runs: |
      mkdir -p ${{targets.destdir}}/usr/bin
      mkdir -p ${{targets.destdir}}/etc/service
      mkdir -p ${{targets.destdir}}/scripts
      mkdir -p ${{targets.destdir}}/var/spool
      mkdir -p ${{targets.destdir}}${RW_DIR}/supervise
      ln -s "$RW_DIR/tmp" ${{targets.destdir}}/var/tmp

      # launch.sh holds the original “exec env …” line
      sed -i -E \
        's|\$\([^)]+\) /bin/etcd --data-dir /run/etcd\.data|$(apk --print-arch) /usr/bin/etcd --data-dir /run/etcd.data|' \
        postgres-appliance/runit/etcd/run


      install -m755 postgres-appliance/launch.sh ${{targets.contextdir}}/usr/bin/
      cp -r postgres-appliance/scripts/* postgres-appliance/bootstrap/* postgres-appliance/major_upgrade/* ${{targets.destdir}}/scripts/
      cp postgres-appliance/motd ${{targets.destdir}}/etc/
      cp postgres-appliance/pgq_ticker.ini ${{targets.destdir}}/
      cp -r postgres-appliance/runit/* ${{targets.destdir}}/etc/service
      for d in ${{targets.destdir}}/etc/service/*; do
        chmod 755 "$d"/*
        ln -s /run/supervise/"$(basename "$d")" "$d/supervise"
      done

subpackages:
  - name: ${{package.name}}-compat
    description: "${{package.name}} compat package"
    dependencies:
      runtime:
        - bash
        - ca-certificates-bundle
    pipeline:
      - runs: |
          mkdir -p ${{targets.contextdir}}/run/
          mkdir -p ${{targets.contextdir}}/.config/patroni
          mkdir -p ${{targets.contextdir}}/$PGHOME
          mkdir -p ${{targets.subpkgdir}}/etc/postgresql-common
          mkdir -p ${{targets.subpkgdir}}/usr/local/lib
          ln -s /usr/bin/launch.sh ${{targets.contextdir}}/
          ln -s "$RW_DIR/postgres.yml" "${{targets.contextdir}}/$PGHOME/postgres.yml"
          ln -s "$RW_DIR/etc" "${{targets.contextdir}}/$PGHOME/etc"
          ln -s "$PGHOME/postgres.yml" "${{targets.contextdir}}/.config/patroni/patronictl.yaml"
          ln -s /home/postgres/pgq_ticker.ini "/pgq_ticker.ini"
          touch ${{targets.subpkgdir}}/etc/postgresql-common/createcluster.conf
          sed -ri 's/#(create_main_cluster) .*$/\1 = false/' ${{targets.subpkgdir}}/etc/postgresql-common/createcluster.conf
          gcc -s -shared -fPIC -o ${{targets.subpkgdir}}/usr/local/lib/cron_unprivileged.so postgres-appliance/cron_unprivileged.c
          ln -s "/etc/service" ${{targets.contextdir}}/$RW_DIR/service
    test:
      pipeline:
        - uses: test/tw/ldd-check

capabilities:
  add:
    - cap_sys_nice

test:
  environment:
    contents:
      packages:
        - busybox
        - ca-certificates-bundle
        - libarchive-tools # bsdtar
        - spilo-17-compat
        - sudo-rs
        - curl
        - libcap-utils
    accounts:
      groups:
        - groupname: postgres
          gid: 100
      users:
        - username: postgres
          gid: 100
          uid: 100
      run-as: 100
    environment:
      SPILO_PROVIDER: "local"
      DEMO: true
      PGVERSION: "17"
      RW_DIR: /run
      PGLOG: /home/postgres/pgdata/pgroot/pg_log
      PGDATA: /home/postgres/pgdata/pgroot/data
      PGROOT: /home/postgres/pgdata/pgroot
      WAL_SWIFT_BUCKET: False
      PATRONIVERSION: "4.0.5"
      USE_WALG_BACKUP: true
      PGBOUNCER_CONFIGURATION: |
        [pgbouncer]
        listen_port = 5432
        listen_addr = *
        auth_type = trust
        logfile = /var/log/pgbouncer.log
        pidfile = /run/pgbouncer/pgbouncer.pid
        admin_users = postgres
        stats_users = postgres

        [databases]
        * = host=127.0.0.1 port=5433
      SPILO_CONFIGURATION: |
        postgresql:
          listen: 0.0.0.0:5432
          connect_address: 127.0.0.1:5432
          data_dir: /home/postgres/pgdata/pgroot/data
          bin_dir: /usr/bin
          authentication:
            replication:
              username: replicator
              password: rep-pass
            superuser:
              username: postgres
              password: postgres
  pipeline:
    - name: Run and test ${{package.name}}
      runs: |
        echo "127.0.0.1 $(hostname)" >> /etc/hosts
        mkdir -p "$RW_DIR"/{tmp,certs}
        mkdir -p /var/run
        mkdir -p /var/log
        mkdir -p /run/pgbouncer
        mkdir -p "$PGDATA"
        ln -s chpst /usr/bin/envdir
        chown postgres:postgres /usr/bin/launch.sh
        chown postgres:postgres /run/*
        mkdir -p /var/spool
        ln -s /usr/sbin/crond /usr/sbin/cron
        chown postgres:postgres /var/log
        if [ "$(ls -A /var/log 2>/dev/null)" ]; then
          chmod 755 /var/log/*
        fi
        # Create pgbouncer configuration file from environment variable
        cat > /run/pgbouncer/pgbouncer.ini << EOF
        $PGBOUNCER_CONFIGURATION
        EOF
        chown -R postgres:postgres /run/pgbouncer
        exit 1
        /launch.sh

update:
  enabled: true
  manual: false
  github:
    identifier: "zalando/spilo"
    use-tag: true
    strip-suffix: -p2

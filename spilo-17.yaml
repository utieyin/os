package:
  name: spilo-17
  version: "4.0"
  epoch: 0
  description: "Spilo - a PostgreSQL container image with streaming replication and failover"
  copyright:
    - license: "Apache-2.0"
  dependencies:
    runtime:
      - bash-binsh
      - busybox
      - curl
      - dumb-init
      - etcd~${{vars.etcd-version}}
      - glibc
      - jq
      - patroni
      - pg_auth_mon-${{vars.major-version}}
      - pg_cron-${{vars.major-version}}
      - pg_stat_kcache-${{vars.major-version}}
      - pgbouncer
      - pgqd
      - postgis-${{vars.major-version}}
      - postgresql
      - postgresql-${{vars.major-version}}-client-base
      - postgresql-${{vars.major-version}}-contrib
      - postgresql-client
      - py${{vars.py-version}}-etcd
      - py${{vars.py-version}}-etcd
      - py${{vars.py-version}}-plpython
      - py${{vars.py-version}}-psutil
      - py${{vars.py-version}}-pystache
      - py${{vars.py-version}}-pystache
      - py${{vars.py-version}}-pyyaml
      - py${{vars.py-version}}-requests
      - py${{vars.py-version}}-six
      - runit
      - set_user-${{vars.major-version}}
      - util-linux
      - wal-g-pg

environment:
  contents:
    packages:
      - brotli-dev
      - build-base
      - busybox
      - c-ares-dev
      - libarchive-tools
      - lzo-dev
      - openssl-dev
      - perl
      - util-linux-dev
  environment:
    RW_DIR: /run

var-transforms:
  - from: ${{package.name}}
    match: ^.*-(\d{2})$
    replace: $1
    to: major-version

vars:
  py-version: "3.13"
  etcd-version: "3.5"

pipeline:
  - uses: git-checkout
    with:
      repository: "https://github.com/zalando/spilo.git"
      expected-commit: "4b3d1c6fc66170d8d6cf6a21218146e74ae014d0"
      tag: "${{package.version}}-p2"

  - runs: |
      mkdir -p ${{targets.destdir}}/usr/bin
      mkdir -p ${{targets.destdir}}/etc/service
      mkdir -p ${{targets.destdir}}/scripts
      mkdir -p ${{targets.destdir}}${RW_DIR}/supervise
      # The etcd run script contains "dpkg" which needs changing to run on wolfi
      # https://github.com/zalando/spilo/blob/master/postgres-appliance/runit/etcd/run
      sed -i -E \
        's|\$\([^)]+\) /bin/etcd --data-dir /run/etcd\.data|$(apk --print-arch) /usr/bin/etcd --data-dir /run/etcd.data|' \
        postgres-appliance/runit/etcd/run


      install -m755 postgres-appliance/launch.sh ${{targets.contextdir}}/usr/bin/
      cp -r postgres-appliance/scripts/* postgres-appliance/bootstrap/* postgres-appliance/major_upgrade/* ${{targets.destdir}}/scripts/
      cp postgres-appliance/motd ${{targets.destdir}}/etc/
      cp postgres-appliance/pgq_ticker.ini ${{targets.destdir}}/
      cp -r postgres-appliance/runit/* ${{targets.destdir}}/etc/service
      for d in ${{targets.destdir}}/etc/service/*; do
        chmod 755 "$d"/*
        ln -s /run/supervise/"$(basename "$d")" "$d/supervise"
      done

subpackages:
  - name: ${{package.name}}-compat
    description: "${{package.name}} compat package"
    dependencies:
      runtime:
        - cronie
    pipeline:
      - runs: |
          mkdir -p ${{targets.subpkgdir}}/usr/local/lib
          mkdir -p ${{targets.subpkgdir}}/usr/sbin
          ln -s /usr/bin/launch.sh ${{targets.contextdir}}/launch.sh
          gcc -s -shared -fPIC -o ${{targets.subpkgdir}}/usr/local/lib/cron_unprivileged.so postgres-appliance/cron_unprivileged.c
          ln -s crond ${{targets.subpkgdir}}/usr/sbin/cron
    test:
      pipeline:
        - uses: test/tw/ldd-check
        - uses: test/tw/symlink-check

# capabilities:
#   add:
#     - cap_sys_nice
test:
  environment:
    accounts:
      run-as: 0
    contents:
      packages:
        - spilo-17-compat
        - sudo-rs
        - shadow
    environment:
      SPILO_PROVIDER: "local"
      DEMO: false
      PGVERSION: "17"
      RW_DIR: /run
      PGLOG: /home/postgres/pgdata/pgroot/pg_log
      PGDATA: /home/postgres/pgdata/pgroot/data
      PGROOT: /home/postgres/pgdata/pgroot
      WAL_SWIFT_BUCKET: False
      PATRONIVERSION: "4.0.5"
      USE_WALG_BACKUP: true
      PATRONI_CONFIGURATION: |
        scope: patroni_cls
        namespace: /var/lib/pgsql/config/
        name: pg_node1

        restapi:
          listen: 0.0.0.0:8008
          connect_address: "172.17.0.3:8008"  # REPLACE with actual IP/FQDN

        etcd3:
          hosts:
            - 127.0.0.1:2379

        bootstrap:
          post_init: /scripts/post_init.sh zalandos
          dcs:
            ttl: 30
            loop_wait: 10
            retry_timeout: 10
            maximum_lag_on_failover: 1048576
            postgresql:
              use_pg_rewind: true
              use_slots: true
              parameters:
                max_connections: 100
                shared_buffers: 256MB
                cron.database_name: postgres
                shared_preload_libraries: pg_cron,pg_stat_kcache,set_user
                pg_stat_statements.max: '10000'
        initdb:
          - encoding: UTF8
          - data-checksums
          - waldir: /pg_wal
          - wal-segsize=512

        pg_hba:
          - host replication replicator 10.0.0.0/8 md5
          - host all all 0.0.0.0/0 md5

        users:
          admin:
            password: admin
            options:
              - createrole
              - createdb

        postgresql:
          listen: 0.0.0.0:5432
          connect_address: "172.17.0.3:5432"  # REPLACE with actual IP/FQDN
          data_dir: /home/postgres/pgdata/pgroot/data
          bin_dir: /usr/libexec/postgresql17
          pgpass: /tmp/pgpass
          authentication:
            replication:
              username: replicator
              password: rp1234
            superuser:
              username: postgres
              password: postgres
          pgbackrest:
            command: pgbackrest --stanza=patroni_backup restore --type=none
            keep_data: True
            no_params: True
          basebackup:
            checkpoint: 'fast'

        tags:
          nofailover: false
          noloadbalance: false
          clonefrom: false
          nosync: false
      ETCD_ENABLE_V2: true
      ETCD_ENABLE_V2_HTTP: true
  pipeline:
    - name: Run and test ${{package.name}}
      runs: |
        echo "127.0.0.1 $(hostname)" >> /etc/hosts

        adduser -D -h /home/postgres postgres
        addgroup crontab
        mkdir -p "$RW_DIR"/tmp
        mkdir -p "$RW_DIR"/certs
        mkdir -p "$RW_DIR"/pgbouncer
        mkdir -p /var/run/pgbouncer
        mkdir -p /var/log/pgbouncer
        mkdir -p "$PGDATA"
        mkdir -p /pg_wal
        mkdir -p /var/spool
        mkdir -p "$RW_DIR"/pgbouncer
        chown -R postgres:postgres "$PGDATA"
        chown -R postgres:postgres /pg_wal
        chown -R postgres:postgres /home/postgres
        chown -R postgres:postgres /run/*


        chown postgres:postgres /var/log/*
        chown postgres:postgres /var/run/*


        # Disable pgbouncer service since no configuration is provided
        ln -s /etc/pgbouncer/pgbouncer.ini /run/pgbouncer/pgbouncer.ini
        /launch.sh init &

        # Wait for services to start and Spilo bootstrap to complete
        sleep 20

        echo "=== Spilo Functional Tests ==="

        # Test 1: Verify Patroni is running and has leadership
        echo "Testing Patroni status..."
        curl -s http://localhost:8008/patroni | grep -q "state.*running" || {
          echo "ERROR: Patroni not responding or not in running state"
          exit 1
        }

        # Test 2: Check if PostgreSQL is accepting connections
        echo "Testing PostgreSQL connectivity..."
        pg_isready -h localhost -p 5432 -U postgres || {
          echo "ERROR: PostgreSQL not ready"
          exit 1
        }

        # Test 3: Test database operations
        echo "Testing database operations..."
        PGPASSWORD=postgres psql -h localhost -p 5432 -U postgres -d postgres -c "
          CREATE TABLE IF NOT EXISTS test_table (id SERIAL PRIMARY KEY, data TEXT);
          INSERT INTO test_table (data) VALUES ('test_data_' || now());
          SELECT COUNT(*) FROM test_table;
        " || {
          echo "ERROR: Database operations failed"
          exit 1
        }

        etcd_v3_data=$(etcdctl --endpoints=http://localhost:2379 get --prefix / 2>/dev/null | head -20)

        # Also check etcd v2 API (which py3-etcd uses)
        etcd_v2_data=$(curl -s http://localhost:2379/v2/nodes/ 2>/dev/null || echo "v2 API not available")

        if [ -n "$etcd_v3_data" ] || echo "$etcd_v2_data" | grep -q "node"; then
          echo "SUCCESS: etcd is accessible and contains data"
          echo "etcd v3 data sample: $(echo "$etcd_v3_data" | head -5)"
          echo "etcd v2 response: $etcd_v2_data"
        else
          echo "WARNING: etcd appears empty, but etcd service is running"
          # This is not a failure since etcd is working
        fi

        echo "=== All Spilo tests passed successfully! ==="

update:
  enabled: true
  manual: false
  github:
    identifier: "zalando/spilo"
    use-tag: true
    strip-suffix: -p2

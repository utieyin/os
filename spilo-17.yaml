package:
  name: spilo-17
  version: "4.0"
  epoch: 0
  description: "Spilo - a PostgreSQL container image with streaming replication and failover"
  copyright:
    - license: "Apache-2.0"
  options:
    no-depends: true
  dependencies:
    runtime:
      - cronie
      - curl
      - dumb-init
      - etcd~3.5
      - glibc
      - openssl
      - patroni
      - pgbouncer
      - pgqd
      - postgresql
      - py3-etcd
      - py3-psutil
      - py3-pyyaml
      - py3-requests
      - py3-six
      - py3.13-pystache
      - python-3.13
      - runit
      - util-linux

environment:
  contents:
    packages:
      - brotli-dev
      - build-base
      - busybox
      - c-ares-dev
      - ca-certificates-bundle
      - curl
      - etcd~3.5
      - libarchive-tools
      - libcap-dev
      - libcap-utils
      - lzo-dev
      - openssl-dev
      - patroni
      - perl
      - pgbouncer
      - postgis-17
      - py3.11-pystache
      - util-linux-dev
      - wal-g-pg
  environment:
    RW_DIR: /run

vars:
  python-version: "3.11"

pipeline:
  - uses: git-checkout
    with:
      repository: "https://github.com/zalando/spilo.git"
      expected-commit: "4b3d1c6fc66170d8d6cf6a21218146e74ae014d0"
      tag: "${{package.version}}-p2"

  - runs: |
      mkdir -p ${{targets.destdir}}/usr/bin
      mkdir -p ${{targets.destdir}}/etc/service
      mkdir -p ${{targets.destdir}}/scripts
      mkdir -p ${{targets.destdir}}/var/spool
      mkdir -p ${{targets.destdir}}${RW_DIR}/supervise
      ln -s "$RW_DIR/tmp" ${{targets.destdir}}/var/tmp

      # launch.sh holds the original “exec env …” line
      sed -i -E \
        's|\$\([^)]+\) /bin/etcd --data-dir /run/etcd\.data|$(apk --print-arch) /usr/bin/etcd --data-dir /run/etcd.data|' \
        postgres-appliance/runit/etcd/run


      install -m755 postgres-appliance/launch.sh ${{targets.contextdir}}/usr/bin/
      cp -r postgres-appliance/scripts/* postgres-appliance/bootstrap/* postgres-appliance/major_upgrade/* ${{targets.destdir}}/scripts/
      cp postgres-appliance/motd ${{targets.destdir}}/etc/
      cp postgres-appliance/pgq_ticker.ini ${{targets.destdir}}/
      cp -r postgres-appliance/runit/* ${{targets.destdir}}/etc/service
      for d in ${{targets.destdir}}/etc/service/*; do
        chmod 755 "$d"/*
        ln -s /run/supervise/"$(basename "$d")" "$d/supervise"
      done

subpackages:
  - name: ${{package.name}}-compat
    description: "${{package.name}} compat package"
    dependencies:
      runtime:
        - bash
        - ca-certificates-bundle
    pipeline:
      - runs: |
          mkdir -p ${{targets.contextdir}}/.config/patroni
          mkdir -p ${{targets.contextdir}}/$PGHOME
          mkdir -p ${{targets.subpkgdir}}/etc/postgresql-common
          mkdir -p ${{targets.subpkgdir}}/usr/local/lib
          ln -s /usr/bin/launch.sh ${{targets.contextdir}}/
          # ln -s "$PGHOME/postgres.yml" "${{targets.contextdir}}/.config/patroni/patronictl.yaml"
          # ln -s /home/postgres/pgq_ticker.ini "/pgq_ticker.ini"
          touch ${{targets.subpkgdir}}/etc/postgresql-common/createcluster.conf
          sed -ri 's/#(create_main_cluster) .*$/\1 = false/' ${{targets.subpkgdir}}/etc/postgresql-common/createcluster.conf
          gcc -s -shared -fPIC -o ${{targets.subpkgdir}}/usr/local/lib/cron_unprivileged.so postgres-appliance/cron_unprivileged.c
          rm -rf ${{targets.contextdir}}/etc/pgbouncer/*
    test:
      pipeline:
        - uses: test/tw/ldd-check

capabilities:
  add:
    - cap_sys_nice

test:
  environment:
    contents:
      packages:
        - busybox
        - ca-certificates-bundle
        - libarchive-tools # bsdtar
        - spilo-17-compat
        - sudo-rs
        - curl
        - libcap-utils
        - shadow
        - postgresql-client
        - glibc-locale-en
        - py3.13-etcd
        - postgresql-17-contrib
        - postgresql-17-client-base
        - jq
    environment:
      SPILO_PROVIDER: "local"
      DEMO: false
      PGVERSION: "17"
      RW_DIR: /run
      PGLOG: /home/postgres/pgdata/pgroot/pg_log
      PGDATA: /home/postgres/pgdata/pgroot/data
      PGROOT: /home/postgres/pgdata/pgroot
      WAL_SWIFT_BUCKET: False
      PATRONIVERSION: "4.0.5"
      USE_WALG_BACKUP: true
      PATRONI_CONFIGURATION: |
        scope: patroni_cls
        namespace: /var/lib/pgsql/config/
        name: pg_node1

        restapi:
          listen: 0.0.0.0:8008
          connect_address: "172.17.0.3:8008"  # REPLACE with actual IP/FQDN

        etcd3:
          hosts:
            - 127.0.0.1:2379

        bootstrap:
          dcs:
            ttl: 30
            loop_wait: 10
            retry_timeout: 10
            maximum_lag_on_failover: 1048576
            postgresql:
              use_pg_rewind: true
              use_slots: true
              parameters:
                max_connections: 100
                shared_buffers: 256MB

        initdb:
          - encoding: UTF8
          - data-checksums
          - waldir: /pg_wal
          - wal-segsize=512

        pg_hba:
          - host replication replicator 10.0.0.0/8 md5
          - host all all 0.0.0.0/0 md5

        users:
          admin:
            password: admin
            options:
              - createrole
              - createdb

        postgresql:
          listen: 0.0.0.0:5432
          connect_address: "172.17.0.3:5432"  # REPLACE with actual IP/FQDN
          data_dir: /home/postgres/pgdata/pgroot/data
          bin_dir: /usr/libexec/postgresql17
          pgpass: /tmp/pgpass
          authentication:
            replication:
              username: replicator
              password: rp1234
            superuser:
              username: postgres
              password: postgres
          pgbackrest:
            command: pgbackrest --stanza=patroni_backup restore --type=none
            keep_data: True
            no_params: True
          basebackup:
            checkpoint: 'fast'

        tags:
          nofailover: false
          noloadbalance: false
          clonefrom: false
          nosync: false
      ETCD_ENABLE_V2: true
      ETCD_ENABLE_V2_HTTP: true
  pipeline:
    - name: Run and test ${{package.name}}
      runs: |
        echo "127.0.0.1 $(hostname)" >> /etc/hosts

        adduser -D -h /home/postgres postgres
        mkdir -p "$RW_DIR"/{tmp,certs}
        mkdir -p /var/run
        mkdir -p /var/log
        mkdir -p "$PGDATA"
        mkdir -p /pg_wal
        chown -R postgres:postgres "$PGDATA"
        chown -R postgres:postgres /pg_wal
        chown -R postgres:postgres /home/postgres

        cp /pgq_ticker.ini /home/postgres/pgq_ticker.ini
        chown postgres:postgres /home/postgres/pgq_ticker.ini

        ln -s chpst /usr/bin/envdir
        chown -R postgres:postgres /run/*
        mkdir -p /var/spool
        ln -s /usr/sbin/crond /usr/sbin/cron
        chown postgres:postgres /var/log
        if [ "$(ls -A /var/log 2>/dev/null)" ]; then
          chmod 755 /var/log/*
        fi

        # Disable pgbouncer service since no configuration is provided
        # rm -rf /run/service/pgbouncer

        /launch.sh init &

        # Wait for services to start and Spilo bootstrap to complete
        sleep 20

        echo "=== Spilo Functional Tests ==="

        # Test 1: Verify Patroni is running and has leadership
        echo "Testing Patroni status..."
        curl -s http://localhost:8008/patroni | grep -q "state.*running" || {
          echo "ERROR: Patroni not responding or not in running state"
          exit 1
        }

        # Test 2: Check if PostgreSQL is accepting connections
        echo "Testing PostgreSQL connectivity..."
        pg_isready -h localhost -p 5432 -U postgres || {
          echo "ERROR: PostgreSQL not ready"
          exit 1
        }

        # Test 3: Test database operations
        echo "Testing database operations..."
        PGPASSWORD=postgres psql -h localhost -p 5432 -U postgres -d postgres -c "
          CREATE TABLE IF NOT EXISTS test_table (id SERIAL PRIMARY KEY, data TEXT);
          INSERT INTO test_table (data) VALUES ('test_data_' || now());
          SELECT COUNT(*) FROM test_table;
        " || {
          echo "ERROR: Database operations failed"
          exit 1
        }

        etcd_v3_data=$(etcdctl --endpoints=http://localhost:2379 get --prefix / 2>/dev/null | head -20)

        # Also check etcd v2 API (which py3-etcd uses)
        etcd_v2_data=$(curl -s http://localhost:2379/v2/nodes/ 2>/dev/null || echo "v2 API not available")

        if [ -n "$etcd_v3_data" ] || echo "$etcd_v2_data" | grep -q "node"; then
          echo "SUCCESS: etcd is accessible and contains data"
          echo "etcd v3 data sample: $(echo "$etcd_v3_data" | head -5)"
          echo "etcd v2 response: $etcd_v2_data"
        else
          echo "WARNING: etcd appears empty, but etcd service is running"
          # This is not a failure since etcd is working
        fi

        echo "=== All Spilo tests passed successfully! ==="

update:
  enabled: true
  manual: false
  github:
    identifier: "zalando/spilo"
    use-tag: true
    strip-suffix: -p2

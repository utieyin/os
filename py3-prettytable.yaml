package:
  name: py3-prettytable
  version: "3.15.1"
  description: "Display tabular data in a visually appealing ASCII table format"
  epoch: 0
  copyright:
    - license: BSD-3-Clause
vars:
  pypi-package: prettytable
environment:
  contents:
    packages:
      - build-base
      - busybox
      - ca-certificates-bundle
      - py3-supported-build-base
      - py3-supported-hatch
      - py3-supported-hatch-vcs
      - python3
      - py3-wcwidth
  environment:
    SOURCE_DATE_EPOCH: 315532800


data:
  - name: py-versions
    items:
      3.10: '310'
      3.11: '311'
      3.12: '312'
      3.13: '313'

pipeline:
  - uses: git-checkout
    with:
      repository: https://github.com/prettytable/prettytable.git
      tag: ${{package.version}}
      expected-commit: be8d6f2510b8151ee9b0579e21eb3ceef681fcb0
subpackages:
  - range: py-versions
    name: py${{range.key}}-${{vars.pypi-package}}
    description: ${{vars.pypi-package}} installed for python${{range.key}}
    dependencies:
      provider-priority: ${{range.value}}
      runtime:
        - python-${{range.key}}
        - py${{range.key}}-wcwidth
    pipeline:
      - uses: py/pip-build-install
        with:
          python: python${{range.key}}
          prevent-inclusion: melange-out
      - uses: strip
    test:

      pipeline:
        - name: Check if the package is installed
          runs: |
            python3 -c "import prettytable; print(prettytable.__version__)" | grep -q "${{package.version}}"
        - name: Test adding and retrieving table data
          runs: |
            python3 -c "
            from prettytable import PrettyTable

            # Expected structured data
            expected_data = [
                {'Name': 'Alice', 'Age': 30, 'City': 'New York'},
                {'Name': 'Bob', 'Age': 25, 'City': 'Los Angeles'},
                {'Name': 'Charlie', 'Age': 35, 'City': 'Chicago'}
            ]

            # Create PrettyTable instance
            table = PrettyTable(['Name', 'Age', 'City'])

            # Add rows dynamically
            for row in expected_data:
                table.add_row([row['Name'], row['Age'], row['City']])

            # Retrieve data from table
            actual_data = [
                {'Name': row[0], 'Age': int(row[1]), 'City': row[2]}
                for row in table._rows  # Access raw data stored in the table
            ]

            # Compare retrieved data with expected values
            if actual_data != expected_data:
                print('Mismatch in table data!')
                print('Expected:', expected_data)
                print('Actual:', actual_data)
                exit(1)

            print('Table data retrieval matches expected values.')
            "
  - name: py3-supported-${{vars.pypi-package}}
    description: meta package providing ${{vars.pypi-package}} for supported python versions.
    dependencies:
      runtime:
        - py3.10-${{vars.pypi-package}}
        - py3.11-${{vars.pypi-package}}
        - py3.12-${{vars.pypi-package}}
        - py3.13-${{vars.pypi-package}}
update:
  enabled: true
  github:
    identifier: prymitive/karma
    strip-prefix: v
